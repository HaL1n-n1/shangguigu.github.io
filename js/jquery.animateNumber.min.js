/*
 jQuery animateNumber plugin v0.0.14
 (c) 2013, Alexandr Borisov.
 https://github.com/aishek/jquery-animateNumber
*/
(function(d) {
    // Define a function to reverse a string
    var r = function(b) {
        return b.split("").reverse().join("");
    },
    // Object with a method to update the number being animated
    m = {
        numberStep: function(b, a) {
            var e = Math.floor(b);
            d(a.elem).text(e);
        }
    },
    // Function to handle number animation
    g = function(b) {
        var a = b.elem;
        // Ensure the element is a node and has a parent node
        if (a.nodeType && a.parentNode) {
            // Get the appropriate numberStep function or use the default one
            a = a._animateNumberSetter;
            a || (a = m.numberStep),
            // Call the numberStep function with the current value and the element
            a(b.now, b);
        }
    };
    // Extend jQuery's Tween object with a hook for 'number' property
    d.Tween && d.Tween.propHooks ? d.Tween.propHooks.number = {
        set: g
    } : d.fx.step.number = g;
    // Define the animateNumber plugin
    d.animateNumber = {
        numberStepFactories: {
            // Factory function to append text to the number
            append: function(b) {
                return function(a, e) {
                    var f = Math.floor(a);
                    d(e.elem).prop("number", a).text(f + b);
                };
            },
            // Factory function to add separators to the number
            separator: function(b, a, e) {
                b = b || " ";
                a = a || 3;
                e = e || "";
                return function(f, k) {
                    var u = 0 > f,
                        c = Math.floor((u ? -1 : 1) * f).toString(),
                        n = d(k.elem);
                    if (c.length > a) {
                        for (var h = c, l = a, m = h.split("").reverse(), c = [], p, s, q, t = 0, g = Math.ceil(h.length / l); t < g; t++) {
                            p = "";
                            for (q = 0; q < l; q++) {
                                s = t * l + q;
                                if (s === h.length) break;
                                p += m[s];
                            }
                            c.push(p);
                        }
                        h = c.length - 1;
                        l = r(c[h]);
                        c[h] = r(parseInt(l, 10).toString());
                        c = c.join(b);
                        c = r(c);
                    }
                    n.prop("number", f).text((u ? "-" : "") + c + e);
                };
            }
        }
    };
    // Extend jQuery's fn object with animateNumber method
    d.fn.animateNumber = function() {
        // Prepare arguments for animate method
        for (var b = arguments[0], a = d.extend({}, m, b), e = d(this), f = [a], k = 1, g = arguments.length; k < g; k++) f.push(arguments[k]);
        // If a custom numberStep function is provided, handle it properly
        if (b.numberStep) {
            var c = this.each(function() {
                this._animateNumberSetter = b.numberStep;
            });
            // Override complete function to clean up after animation
            a.complete && (a.complete = function() {
                c.each(function() {
                    delete this._animateNumberSetter;
                });
                b.complete && b.complete.apply(this, arguments);
            });
        }
        // Call jQuery's animate method with prepared arguments
        return e.animate.apply(e, f);
    };
})(jQuery);
